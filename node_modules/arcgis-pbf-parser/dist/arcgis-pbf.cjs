'use strict';

var Pbf = require('pbf');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Pbf__default = /*#__PURE__*/_interopDefaultLegacy(Pbf);

// FeatureCollectionPBuffer ========================================

const FeatureCollectionPBuffer = {};

FeatureCollectionPBuffer.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer._readField, {version: '', queryResult: null}, end);
};
FeatureCollectionPBuffer._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.version = pbf.readString();
  else if (tag === 2) obj.queryResult = FeatureCollectionPBuffer.QueryResult.read(pbf, pbf.readVarint() + pbf.pos);
};
FeatureCollectionPBuffer.write = function (obj, pbf) {
  if (obj.version) pbf.writeStringField(1, obj.version);
  if (obj.queryResult) pbf.writeMessage(2, FeatureCollectionPBuffer.QueryResult.write, obj.queryResult);
};

FeatureCollectionPBuffer.GeometryType = {
  'esriGeometryTypePoint': {
    'value': 0,
    'options': {}
  },
  'esriGeometryTypeMultipoint': {
    'value': 1,
    'options': {}
  },
  'esriGeometryTypePolyline': {
    'value': 2,
    'options': {}
  },
  'esriGeometryTypePolygon': {
    'value': 3,
    'options': {}
  },
  'esriGeometryTypeMultipatch': {
    'value': 4,
    'options': {}
  },
  'esriGeometryTypeNone': {
    'value': 127,
    'options': {}
  }
};

FeatureCollectionPBuffer.FieldType = {
  'esriFieldTypeSmallInteger': {
    'value': 0,
    'options': {}
  },
  'esriFieldTypeInteger': {
    'value': 1,
    'options': {}
  },
  'esriFieldTypeSingle': {
    'value': 2,
    'options': {}
  },
  'esriFieldTypeDouble': {
    'value': 3,
    'options': {}
  },
  'esriFieldTypeString': {
    'value': 4,
    'options': {}
  },
  'esriFieldTypeDate': {
    'value': 5,
    'options': {}
  },
  'esriFieldTypeOID': {
    'value': 6,
    'options': {}
  },
  'esriFieldTypeGeometry': {
    'value': 7,
    'options': {}
  },
  'esriFieldTypeBlob': {
    'value': 8,
    'options': {}
  },
  'esriFieldTypeRaster': {
    'value': 9,
    'options': {}
  },
  'esriFieldTypeGUID': {
    'value': 10,
    'options': {}
  },
  'esriFieldTypeGlobalID': {
    'value': 11,
    'options': {}
  },
  'esriFieldTypeXML': {
    'value': 12,
    'options': {}
  }
};

FeatureCollectionPBuffer.SQLType = {
  'sqlTypeBigInt': {
    'value': 0,
    'options': {}
  },
  'sqlTypeBinary': {
    'value': 1,
    'options': {}
  },
  'sqlTypeBit': {
    'value': 2,
    'options': {}
  },
  'sqlTypeChar': {
    'value': 3,
    'options': {}
  },
  'sqlTypeDate': {
    'value': 4,
    'options': {}
  },
  'sqlTypeDecimal': {
    'value': 5,
    'options': {}
  },
  'sqlTypeDouble': {
    'value': 6,
    'options': {}
  },
  'sqlTypeFloat': {
    'value': 7,
    'options': {}
  },
  'sqlTypeGeometry': {
    'value': 8,
    'options': {}
  },
  'sqlTypeGUID': {
    'value': 9,
    'options': {}
  },
  'sqlTypeInteger': {
    'value': 10,
    'options': {}
  },
  'sqlTypeLongNVarchar': {
    'value': 11,
    'options': {}
  },
  'sqlTypeLongVarbinary': {
    'value': 12,
    'options': {}
  },
  'sqlTypeLongVarchar': {
    'value': 13,
    'options': {}
  },
  'sqlTypeNChar': {
    'value': 14,
    'options': {}
  },
  'sqlTypeNVarchar': {
    'value': 15,
    'options': {}
  },
  'sqlTypeOther': {
    'value': 16,
    'options': {}
  },
  'sqlTypeReal': {
    'value': 17,
    'options': {}
  },
  'sqlTypeSmallInt': {
    'value': 18,
    'options': {}
  },
  'sqlTypeSqlXml': {
    'value': 19,
    'options': {}
  },
  'sqlTypeTime': {
    'value': 20,
    'options': {}
  },
  'sqlTypeTimestamp': {
    'value': 21,
    'options': {}
  },
  'sqlTypeTimestamp2': {
    'value': 22,
    'options': {}
  },
  'sqlTypeTinyInt': {
    'value': 23,
    'options': {}
  },
  'sqlTypeVarbinary': {
    'value': 24,
    'options': {}
  },
  'sqlTypeVarchar': {
    'value': 25,
    'options': {}
  }
};

FeatureCollectionPBuffer.QuantizeOriginPostion = {
  'upperLeft': {
    'value': 0,
    'options': {}
  },
  'lowerLeft': {
    'value': 1,
    'options': {}
  }
};

// FeatureCollectionPBuffer.SpatialReference ========================================

FeatureCollectionPBuffer.SpatialReference = {};

FeatureCollectionPBuffer.SpatialReference.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.SpatialReference._readField, {wkid: 0, lastestWkid: 0, vcsWkid: 0, latestVcsWkid: 0, wkt: ''}, end);
};
FeatureCollectionPBuffer.SpatialReference._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.wkid = pbf.readVarint();
  else if (tag === 2) obj.lastestWkid = pbf.readVarint();
  else if (tag === 3) obj.vcsWkid = pbf.readVarint();
  else if (tag === 4) obj.latestVcsWkid = pbf.readVarint();
  else if (tag === 5) obj.wkt = pbf.readString();
};
FeatureCollectionPBuffer.SpatialReference.write = function (obj, pbf) {
  if (obj.wkid) pbf.writeVarintField(1, obj.wkid);
  if (obj.lastestWkid) pbf.writeVarintField(2, obj.lastestWkid);
  if (obj.vcsWkid) pbf.writeVarintField(3, obj.vcsWkid);
  if (obj.latestVcsWkid) pbf.writeVarintField(4, obj.latestVcsWkid);
  if (obj.wkt) pbf.writeStringField(5, obj.wkt);
};

// FeatureCollectionPBuffer.Field ========================================

FeatureCollectionPBuffer.Field = {};

FeatureCollectionPBuffer.Field.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Field._readField, {name: '', fieldType: 0, alias: '', sqlType: 0, domain: '', defaultValue: ''}, end);
};
FeatureCollectionPBuffer.Field._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.name = pbf.readString();
  else if (tag === 2) obj.fieldType = pbf.readVarint();
  else if (tag === 3) obj.alias = pbf.readString();
  else if (tag === 4) obj.sqlType = pbf.readVarint();
  else if (tag === 5) obj.domain = pbf.readString();
  else if (tag === 6) obj.defaultValue = pbf.readString();
};
FeatureCollectionPBuffer.Field.write = function (obj, pbf) {
  if (obj.name) pbf.writeStringField(1, obj.name);
  if (obj.fieldType) pbf.writeVarintField(2, obj.fieldType);
  if (obj.alias) pbf.writeStringField(3, obj.alias);
  if (obj.sqlType) pbf.writeVarintField(4, obj.sqlType);
  if (obj.domain) pbf.writeStringField(5, obj.domain);
  if (obj.defaultValue) pbf.writeStringField(6, obj.defaultValue);
};

// FeatureCollectionPBuffer.Value ========================================

FeatureCollectionPBuffer.Value = {};

FeatureCollectionPBuffer.Value.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Value._readField, {string_value: '', value_type: null, float_value: 0, double_value: 0, sint_value: 0, uint_value: 0, int64_value: 0, uint64_value: 0, sint64_value: 0, bool_value: false}, end);
};
FeatureCollectionPBuffer.Value._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.string_value = pbf.readString(), obj.value_type = 'string_value';
  else if (tag === 2) obj.float_value = pbf.readFloat(), obj.value_type = 'float_value';
  else if (tag === 3) obj.double_value = pbf.readDouble(), obj.value_type = 'double_value';
  else if (tag === 4) obj.sint_value = pbf.readSVarint(), obj.value_type = 'sint_value';
  else if (tag === 5) obj.uint_value = pbf.readVarint(), obj.value_type = 'uint_value';
  else if (tag === 6) obj.int64_value = pbf.readVarint(true), obj.value_type = 'int64_value';
  else if (tag === 7) obj.uint64_value = pbf.readVarint(), obj.value_type = 'uint64_value';
  else if (tag === 8) obj.sint64_value = pbf.readSVarint(), obj.value_type = 'sint64_value';
  else if (tag === 9) obj.bool_value = pbf.readBoolean(), obj.value_type = 'bool_value';
};
FeatureCollectionPBuffer.Value.write = function (obj, pbf) {
  if (obj.string_value) pbf.writeStringField(1, obj.string_value);
  if (obj.float_value) pbf.writeFloatField(2, obj.float_value);
  if (obj.double_value) pbf.writeDoubleField(3, obj.double_value);
  if (obj.sint_value) pbf.writeSVarintField(4, obj.sint_value);
  if (obj.uint_value) pbf.writeVarintField(5, obj.uint_value);
  if (obj.int64_value) pbf.writeVarintField(6, obj.int64_value);
  if (obj.uint64_value) pbf.writeVarintField(7, obj.uint64_value);
  if (obj.sint64_value) pbf.writeSVarintField(8, obj.sint64_value);
  if (obj.bool_value) pbf.writeBooleanField(9, obj.bool_value);
};

// FeatureCollectionPBuffer.Geometry ========================================

FeatureCollectionPBuffer.Geometry = {};

FeatureCollectionPBuffer.Geometry.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Geometry._readField, {lengths: [], coords: []}, end);
};
FeatureCollectionPBuffer.Geometry._readField = function (tag, obj, pbf) {
  if (tag === 2) pbf.readPackedVarint(obj.lengths);
  else if (tag === 3) pbf.readPackedSVarint(obj.coords);
};
FeatureCollectionPBuffer.Geometry.write = function (obj, pbf) {
  if (obj.lengths) pbf.writePackedVarint(2, obj.lengths);
  if (obj.coords) pbf.writePackedSVarint(3, obj.coords);
};

// FeatureCollectionPBuffer.esriShapeBuffer ========================================

FeatureCollectionPBuffer.esriShapeBuffer = {};

FeatureCollectionPBuffer.esriShapeBuffer.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.esriShapeBuffer._readField, {bytes: null}, end);
};
FeatureCollectionPBuffer.esriShapeBuffer._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.bytes = pbf.readBytes();
};
FeatureCollectionPBuffer.esriShapeBuffer.write = function (obj, pbf) {
  if (obj.bytes) pbf.writeBytesField(1, obj.bytes);
};

// FeatureCollectionPBuffer.Feature ========================================

FeatureCollectionPBuffer.Feature = {};

FeatureCollectionPBuffer.Feature.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Feature._readField, {attributes: [], geometry: null, compressed_geometry: null, shapeBuffer: null, centroid: null}, end);
};
FeatureCollectionPBuffer.Feature._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.attributes.push(FeatureCollectionPBuffer.Value.read(pbf, pbf.readVarint() + pbf.pos));
  else if (tag === 2) obj.geometry = FeatureCollectionPBuffer.Geometry.read(pbf, pbf.readVarint() + pbf.pos), obj.compressed_geometry = 'geometry';
  else if (tag === 3) obj.shapeBuffer = FeatureCollectionPBuffer.esriShapeBuffer.read(pbf, pbf.readVarint() + pbf.pos), obj.compressed_geometry = 'shapeBuffer';
  else if (tag === 4) obj.centroid = FeatureCollectionPBuffer.Geometry.read(pbf, pbf.readVarint() + pbf.pos);
};
FeatureCollectionPBuffer.Feature.write = function (obj, pbf) {
  if (obj.attributes) for (let i = 0; i < obj.attributes.length; i++) pbf.writeMessage(1, FeatureCollectionPBuffer.Value.write, obj.attributes[i]);
  if (obj.geometry) pbf.writeMessage(2, FeatureCollectionPBuffer.Geometry.write, obj.geometry);
  if (obj.shapeBuffer) pbf.writeMessage(3, FeatureCollectionPBuffer.esriShapeBuffer.write, obj.shapeBuffer);
  if (obj.centroid) pbf.writeMessage(4, FeatureCollectionPBuffer.Geometry.write, obj.centroid);
};

// FeatureCollectionPBuffer.UniqueIdField ========================================

FeatureCollectionPBuffer.UniqueIdField = {};

FeatureCollectionPBuffer.UniqueIdField.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.UniqueIdField._readField, {name: '', isSystemMaintained: false}, end);
};
FeatureCollectionPBuffer.UniqueIdField._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.name = pbf.readString();
  else if (tag === 2) obj.isSystemMaintained = pbf.readBoolean();
};
FeatureCollectionPBuffer.UniqueIdField.write = function (obj, pbf) {
  if (obj.name) pbf.writeStringField(1, obj.name);
  if (obj.isSystemMaintained) pbf.writeBooleanField(2, obj.isSystemMaintained);
};

// FeatureCollectionPBuffer.GeometryProperties ========================================

FeatureCollectionPBuffer.GeometryProperties = {};

FeatureCollectionPBuffer.GeometryProperties.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.GeometryProperties._readField, {shapeAreaFieldName: '', shapeLengthFieldName: '', units: ''}, end);
};
FeatureCollectionPBuffer.GeometryProperties._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.shapeAreaFieldName = pbf.readString();
  else if (tag === 2) obj.shapeLengthFieldName = pbf.readString();
  else if (tag === 3) obj.units = pbf.readString();
};
FeatureCollectionPBuffer.GeometryProperties.write = function (obj, pbf) {
  if (obj.shapeAreaFieldName) pbf.writeStringField(1, obj.shapeAreaFieldName);
  if (obj.shapeLengthFieldName) pbf.writeStringField(2, obj.shapeLengthFieldName);
  if (obj.units) pbf.writeStringField(3, obj.units);
};

// FeatureCollectionPBuffer.ServerGens ========================================

FeatureCollectionPBuffer.ServerGens = {};

FeatureCollectionPBuffer.ServerGens.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.ServerGens._readField, {minServerGen: 0, serverGen: 0}, end);
};
FeatureCollectionPBuffer.ServerGens._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.minServerGen = pbf.readVarint();
  else if (tag === 2) obj.serverGen = pbf.readVarint();
};
FeatureCollectionPBuffer.ServerGens.write = function (obj, pbf) {
  if (obj.minServerGen) pbf.writeVarintField(1, obj.minServerGen);
  if (obj.serverGen) pbf.writeVarintField(2, obj.serverGen);
};

// FeatureCollectionPBuffer.Scale ========================================

FeatureCollectionPBuffer.Scale = {};

FeatureCollectionPBuffer.Scale.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Scale._readField, {xScale: 0, yScale: 0, mScale: 0, zScale: 0}, end);
};
FeatureCollectionPBuffer.Scale._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.xScale = pbf.readDouble();
  else if (tag === 2) obj.yScale = pbf.readDouble();
  else if (tag === 3) obj.mScale = pbf.readDouble();
  else if (tag === 4) obj.zScale = pbf.readDouble();
};
FeatureCollectionPBuffer.Scale.write = function (obj, pbf) {
  if (obj.xScale) pbf.writeDoubleField(1, obj.xScale);
  if (obj.yScale) pbf.writeDoubleField(2, obj.yScale);
  if (obj.mScale) pbf.writeDoubleField(3, obj.mScale);
  if (obj.zScale) pbf.writeDoubleField(4, obj.zScale);
};

// FeatureCollectionPBuffer.Translate ========================================

FeatureCollectionPBuffer.Translate = {};

FeatureCollectionPBuffer.Translate.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Translate._readField, {xTranslate: 0, yTranslate: 0, mTranslate: 0, zTranslate: 0}, end);
};
FeatureCollectionPBuffer.Translate._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.xTranslate = pbf.readDouble();
  else if (tag === 2) obj.yTranslate = pbf.readDouble();
  else if (tag === 3) obj.mTranslate = pbf.readDouble();
  else if (tag === 4) obj.zTranslate = pbf.readDouble();
};
FeatureCollectionPBuffer.Translate.write = function (obj, pbf) {
  if (obj.xTranslate) pbf.writeDoubleField(1, obj.xTranslate);
  if (obj.yTranslate) pbf.writeDoubleField(2, obj.yTranslate);
  if (obj.mTranslate) pbf.writeDoubleField(3, obj.mTranslate);
  if (obj.zTranslate) pbf.writeDoubleField(4, obj.zTranslate);
};

// FeatureCollectionPBuffer.Transform ========================================

FeatureCollectionPBuffer.Transform = {};

FeatureCollectionPBuffer.Transform.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.Transform._readField, {quantizeOriginPostion: 0, scale: null, translate: null}, end);
};
FeatureCollectionPBuffer.Transform._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.quantizeOriginPostion = pbf.readVarint();
  else if (tag === 2) obj.scale = FeatureCollectionPBuffer.Scale.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 3) obj.translate = FeatureCollectionPBuffer.Translate.read(pbf, pbf.readVarint() + pbf.pos);
};
FeatureCollectionPBuffer.Transform.write = function (obj, pbf) {
  if (obj.quantizeOriginPostion) pbf.writeVarintField(1, obj.quantizeOriginPostion);
  if (obj.scale) pbf.writeMessage(2, FeatureCollectionPBuffer.Scale.write, obj.scale);
  if (obj.translate) pbf.writeMessage(3, FeatureCollectionPBuffer.Translate.write, obj.translate);
};

// FeatureCollectionPBuffer.FeatureResult ========================================

FeatureCollectionPBuffer.FeatureResult = {};

FeatureCollectionPBuffer.FeatureResult.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.FeatureResult._readField, {objectIdFieldName: '', uniqueIdField: null, globalIdFieldName: '', geohashFieldName: '', geometryProperties: null, serverGens: null, geometryType: 0, spatialReference: null, exceededTransferLimit: false, hasZ: false, hasM: false, transform: null, fields: [], values: [], features: []}, end);
};
FeatureCollectionPBuffer.FeatureResult._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.objectIdFieldName = pbf.readString();
  else if (tag === 2) obj.uniqueIdField = FeatureCollectionPBuffer.UniqueIdField.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 3) obj.globalIdFieldName = pbf.readString();
  else if (tag === 4) obj.geohashFieldName = pbf.readString();
  else if (tag === 5) obj.geometryProperties = FeatureCollectionPBuffer.GeometryProperties.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 6) obj.serverGens = FeatureCollectionPBuffer.ServerGens.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 7) obj.geometryType = pbf.readVarint();
  else if (tag === 8) obj.spatialReference = FeatureCollectionPBuffer.SpatialReference.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 9) obj.exceededTransferLimit = pbf.readBoolean();
  else if (tag === 10) obj.hasZ = pbf.readBoolean();
  else if (tag === 11) obj.hasM = pbf.readBoolean();
  else if (tag === 12) obj.transform = FeatureCollectionPBuffer.Transform.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 13) obj.fields.push(FeatureCollectionPBuffer.Field.read(pbf, pbf.readVarint() + pbf.pos));
  else if (tag === 14) obj.values.push(FeatureCollectionPBuffer.Value.read(pbf, pbf.readVarint() + pbf.pos));
  else if (tag === 15) obj.features.push(FeatureCollectionPBuffer.Feature.read(pbf, pbf.readVarint() + pbf.pos));
};
FeatureCollectionPBuffer.FeatureResult.write = function (obj, pbf) {
  if (obj.objectIdFieldName) pbf.writeStringField(1, obj.objectIdFieldName);
  if (obj.uniqueIdField) pbf.writeMessage(2, FeatureCollectionPBuffer.UniqueIdField.write, obj.uniqueIdField);
  if (obj.globalIdFieldName) pbf.writeStringField(3, obj.globalIdFieldName);
  if (obj.geohashFieldName) pbf.writeStringField(4, obj.geohashFieldName);
  if (obj.geometryProperties) pbf.writeMessage(5, FeatureCollectionPBuffer.GeometryProperties.write, obj.geometryProperties);
  if (obj.serverGens) pbf.writeMessage(6, FeatureCollectionPBuffer.ServerGens.write, obj.serverGens);
  if (obj.geometryType) pbf.writeVarintField(7, obj.geometryType);
  if (obj.spatialReference) pbf.writeMessage(8, FeatureCollectionPBuffer.SpatialReference.write, obj.spatialReference);
  if (obj.exceededTransferLimit) pbf.writeBooleanField(9, obj.exceededTransferLimit);
  if (obj.hasZ) pbf.writeBooleanField(10, obj.hasZ);
  if (obj.hasM) pbf.writeBooleanField(11, obj.hasM);
  if (obj.transform) pbf.writeMessage(12, FeatureCollectionPBuffer.Transform.write, obj.transform);
  if (obj.fields) for (var i = 0; i < obj.fields.length; i++) pbf.writeMessage(13, FeatureCollectionPBuffer.Field.write, obj.fields[i]);
  if (obj.values) for (i = 0; i < obj.values.length; i++) pbf.writeMessage(14, FeatureCollectionPBuffer.Value.write, obj.values[i]);
  if (obj.features) for (i = 0; i < obj.features.length; i++) pbf.writeMessage(15, FeatureCollectionPBuffer.Feature.write, obj.features[i]);
};

// FeatureCollectionPBuffer.CountResult ========================================

FeatureCollectionPBuffer.CountResult = {};

FeatureCollectionPBuffer.CountResult.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.CountResult._readField, {count: 0}, end);
};
FeatureCollectionPBuffer.CountResult._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.count = pbf.readVarint();
};
FeatureCollectionPBuffer.CountResult.write = function (obj, pbf) {
  if (obj.count) pbf.writeVarintField(1, obj.count);
};

// FeatureCollectionPBuffer.ObjectIdsResult ========================================

FeatureCollectionPBuffer.ObjectIdsResult = {};

FeatureCollectionPBuffer.ObjectIdsResult.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.ObjectIdsResult._readField, {objectIdFieldName: '', serverGens: null, objectIds: []}, end);
};
FeatureCollectionPBuffer.ObjectIdsResult._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.objectIdFieldName = pbf.readString();
  else if (tag === 2) obj.serverGens = FeatureCollectionPBuffer.ServerGens.read(pbf, pbf.readVarint() + pbf.pos);
  else if (tag === 3) pbf.readPackedVarint(obj.objectIds);
};
FeatureCollectionPBuffer.ObjectIdsResult.write = function (obj, pbf) {
  if (obj.objectIdFieldName) pbf.writeStringField(1, obj.objectIdFieldName);
  if (obj.serverGens) pbf.writeMessage(2, FeatureCollectionPBuffer.ServerGens.write, obj.serverGens);
  if (obj.objectIds) pbf.writePackedVarint(3, obj.objectIds);
};

// FeatureCollectionPBuffer.QueryResult ========================================

FeatureCollectionPBuffer.QueryResult = {};

FeatureCollectionPBuffer.QueryResult.read = function (pbf, end) {
  return pbf.readFields(FeatureCollectionPBuffer.QueryResult._readField, {featureResult: null, Results: null, countResult: null, idsResult: null}, end);
};
FeatureCollectionPBuffer.QueryResult._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.featureResult = FeatureCollectionPBuffer.FeatureResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = 'featureResult';
  else if (tag === 2) obj.countResult = FeatureCollectionPBuffer.CountResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = 'countResult';
  else if (tag === 3) obj.idsResult = FeatureCollectionPBuffer.ObjectIdsResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = 'idsResult';
};
FeatureCollectionPBuffer.QueryResult.write = function (obj, pbf) {
  if (obj.featureResult) pbf.writeMessage(1, FeatureCollectionPBuffer.FeatureResult.write, obj.featureResult);
  if (obj.countResult) pbf.writeMessage(2, FeatureCollectionPBuffer.CountResult.write, obj.countResult);
  if (obj.idsResult) pbf.writeMessage(3, FeatureCollectionPBuffer.ObjectIdsResult.write, obj.idsResult);
};

function decode(featureCollectionBuffer) {
  let decodedObject;
  try {
    decodedObject = FeatureCollectionPBuffer.read(new Pbf__default['default'](featureCollectionBuffer));
  } catch (error) {
    throw new Error('Could not parse arcgis-pbf buffer')
  }
  const featureResult = decodedObject.queryResult.featureResult;
  const transform = featureResult.transform;
  const geometryType = featureResult.geometryType;
  const objectIdField = featureResult.objectIdFieldName;

  // Wires up the field keynames
  const fields = featureResult.fields;
  for (let index = 0; index < fields.length; index++) {
    const field = fields[index];
    field.keyName = getKeyName(field);
  }

  const out = {
    type: 'FeatureCollection',
    features: []
  };

  const geometryParser = getGeometryParser(geometryType);

  const featureLen = featureResult.features.length;
  for (let index = 0; index < featureLen; index++) {
    const f = featureResult.features[index];
    out.features.push({
      type: 'Feature',
      id: getFeatureId(fields, f.attributes, objectIdField),
      properties: collectAttributes(fields, f.attributes),
      geometry: f.geometry && geometryParser(f, transform)
    });
  }

  return {
    featureCollection: out,
    exceededTransferLimit: featureResult.exceededTransferLimit
  }
}

// * @property {number} esriGeometryTypePoint=0 esriGeometryTypePoint value
// * @property {number} esriGeometryTypeMultipoint=1 esriGeometryTypeMultipoint value
// * @property {number} esriGeometryTypePolyline=2 esriGeometryTypePolyline value
// * @property {number} esriGeometryTypePolygon=3 esriGeometryTypePolygon value
// * @property {number} esriGeometryTypeMultipatch=4 esriGeometryTypeMultipatch value
// * @property {number} esriGeometryTypeNone=127 esriGeometryTypeNone value
function getGeometryParser (featureType) {
  switch (featureType) {
  case 3:
    return createPolygon
  case 2:
    return createLine
  case 0:
    return createPoint
  default:
    return createPolygon
  }
}

function createPoint (f, transform) {
  const p = {
    type: 'Point',
    coordinates: transformTuple(f.geometry.coords, transform)
  };
  return p
}

function createLine (f, transform) {
  let l = null;
  const lengths = f.geometry.lengths.length;

  if (lengths === 1) {
    l = {
      type: 'LineString',
      coordinates: createLinearRing(f.geometry.coords, transform, 0, f.geometry.lengths[0] * 2)
    };
  } else if (lengths > 1) {
    l = {
      type: 'MultiLineString',
      coordinates: []
    };
    let startPoint = 0;
    for (let index = 0; index < lengths; index++) {
      const stopPoint = startPoint + (f.geometry.lengths[index] * 2);
      const line = createLinearRing(f.geometry.coords, transform, startPoint, stopPoint);
      l.coordinates.push(line);
      startPoint = stopPoint;
    }
  }
  return l
}

function createPolygon (f, transform) {
  const lengths = f.geometry.lengths.length;

  const p = {
    type: 'Polygon',
    coordinates: []
  };

  if (lengths === 1) {
    p.coordinates.push(createLinearRing(f.geometry.coords, transform, 0, f.geometry.lengths[0] * 2));
  } else {
    p.type = 'MultiPolygon';

    let startPoint = 0;
    for (let index = 0; index < lengths; index++) {
      const stopPoint = startPoint + (f.geometry.lengths[index] * 2);
      const ring = createLinearRing(f.geometry.coords, transform, startPoint, stopPoint);

      // Check if the ring is clockwise, if so it's an outer ring
      // If it's counter-clockwise its a hole and so push it to the prev outer ring
      // This is perhaps a bit naive
      // see https://github.com/terraformer-js/terraformer/blob/master/packages/arcgis/src/geojson.js
      // for a fuller example of doing this
      if (ringIsClockwise(ring)) {
        p.coordinates.push([ring]);
      } else if (p.coordinates.length > 0) {
        p.coordinates[p.coordinates.length - 1].push(ring);
      }
      startPoint = stopPoint;
    }
  }
  return p
}

function ringIsClockwise (ringToTest) {
  let total = 0;
  let i = 0;
  const rLength = ringToTest.length;
  let pt1 = ringToTest[i];
  let pt2;
  for (i; i < rLength - 1; i++) {
    pt2 = ringToTest[i + 1];
    total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);
    pt1 = pt2;
  }
  return (total >= 0)
}

function createLinearRing (arr, transform, startPoint, stopPoint) {
  const out = [];
  if (arr.length === 0) return out


  const initialX = arr[startPoint];
  const initialY = arr[startPoint + 1];
  out.push(transformTuple([initialX, initialY], transform));
  let prevX = initialX;
  let prevY = initialY;
  for (let i = startPoint + 2; i < stopPoint; i = i + 2) {
    const x = difference(prevX, arr[i]);
    const y = difference(prevY, arr[i + 1]);
    const transformed = transformTuple([x, y], transform);
    out.push(transformed);
    prevX = x;
    prevY = y;
  }
  return out
}

function collectAttributes(fields, featureAttributes) {
  const out = {};
  for (let i = 0; i < fields.length; i++) {
    const f = fields[i];
    if (featureAttributes[i][featureAttributes[i].value_type] !== undefined) out[f.name] = featureAttributes[i][featureAttributes[i].value_type];
    else out[f.name] = null;
  }
  return out
}

function getFeatureId(fields, featureAttributes, featureIdField) {
  for (let index = 0; index < fields.length; index++) {
    const field = fields[index];
    if (field.name === featureIdField) {
      return featureAttributes[index][featureAttributes[index].value_type]
    }
  }
  return null
}

function getKeyName (fields) {
  switch (fields.fieldType) {
  case 1:
    return 'sintValue'
  case 2:
    return 'floatValue'
  case 3:
    return 'doubleValue'
  case 4:
    return 'stringValue'
  case 5:
    return 'sint64Value'
  case 6:
    return 'uintValue'
  default:
    return null
  }
}

function transformTuple(coords, transform) {

  let x = coords[0];
  let y = coords[1];

  let z = coords[2] ? coords[2] : undefined;
  if (transform.scale) {
    x *= transform.scale.xScale;
    y *= -transform.scale.yScale;
    if (undefined !== z) { z *= transform.scale.zScale; }
  }
  if (transform.translate) {
    x += transform.translate.xTranslate;
    y += transform.translate.yTranslate;
    if (undefined !== z) { z += transform.translate.zTranslate; }
  }
  const ret = [x, y];
  if (undefined !== z) { ret.push(z); }
  return ret;
}

function difference(a, b) {
  return a + b
}

module.exports = decode;
