import isDefined from "../Core/isDefined";
import i18next from "i18next";
export default class ConsoleAnalytics {
    constructor() {
        // either set enableConsoleAnalytics here to true, or pass true
        // in `configParameters.enableConsoleAnalytics` for verbose app analytics.
        Object.defineProperty(this, "enableConsoleAnalytics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    start(configParameters) {
        if (configParameters.googleAnalyticsKey ||
            configParameters.googleAnalyticsOptions) {
            console.log(i18next.t("core.consoleAnalytics.logStartedWithGAParameters"));
        }
        if (isDefined(configParameters.enableConsoleAnalytics)) {
            console.log(i18next.t("core.consoleAnalytics.started"));
            this.enableConsoleAnalytics = configParameters.enableConsoleAnalytics;
        }
        else if (!isDefined(configParameters.enableConsoleAnalytics) ||
            !configParameters.enableConsoleAnalytics) {
            console.log(i18next.t("core.consoleAnalytics.startedNoenableConsoleAnalytics"));
        }
    }
    logEvent(category, action, label, value) {
        if (this.enableConsoleAnalytics) {
            const labelString = isDefined(label) ? " Label: " + label : "";
            const valueString = isDefined(value) ? " Value: " + value : "";
            console.log("** Event ** Category: " +
                category +
                " Action: " +
                action +
                labelString +
                valueString);
        }
    }
}
//# sourceMappingURL=ConsoleAnalytics.js.map