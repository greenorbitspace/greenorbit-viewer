var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import primitiveTrait from "../Decorators/primitiveTrait";
import mixTraits from "../mixTraits";
import LocationSearchProviderTraits, { SearchProviderMapCenterTraits } from "./LocationSearchProviderTraits";
export default class MapboxSearchProviderTraits extends mixTraits(LocationSearchProviderTraits, SearchProviderMapCenterTraits) {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "https://api.mapbox.com/search/geocode/v6/"
        });
        Object.defineProperty(this, "accessToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "partialMatch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "country", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "language", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "en"
        });
        Object.defineProperty(this, "limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 5
        });
        Object.defineProperty(this, "types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "worldview", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "latLonSearchOrder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
}
__decorate([
    primitiveTrait({
        type: "string",
        name: "Access Token",
        description: "All geocoding requests must include an access token."
    })
], MapboxSearchProviderTraits.prototype, "accessToken", void 0);
__decorate([
    primitiveTrait({
        type: "boolean",
        name: "partialMatch",
        description: `Specify whether to return partial match results. 
    When partialMatch is enabled, results will be included that 
    start with the requested string, rather than responses that match it exactly.`
    })
], MapboxSearchProviderTraits.prototype, "partialMatch", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Country",
        description: "A comma-separated list of ISO 3166 alpha 2 country codes."
    })
], MapboxSearchProviderTraits.prototype, "country", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Language",
        description: "The ISO language code to be returned. If not provided, the default is English."
    })
], MapboxSearchProviderTraits.prototype, "language", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "Limit",
        description: "The number of results to return, up to 10."
    })
], MapboxSearchProviderTraits.prototype, "limit", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Types",
        description: `Limit results to one or more types of features, provided as a comma-separated
     list. Pass one or more of the type names as a comma separated list. If no types are specified, 
      all possible types may be returned. Available types are: country, region, postcode, district, 
      place, city, locality, neighborhood, street, address, poi, and category. See the 
      [Administrative unit types](https://docs.mapbox.com/api/search/search-box/#administrative-unit-types) 
      section for details about these types.`
    })
], MapboxSearchProviderTraits.prototype, "types", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Worldview",
        description: `Returns features that are defined differently by audiences that belong to various regional,
     cultural, or political groups. Available worldviews are: ar,cn,in,jp,ma,rs,ru,tr,us. If worldview is not 
     set, the us worldview boundaries are returned by default. For more information about using the worldview 
     parameter, see the [worldviews section](https://docs.mapbox.com/api/search/geocoding/#worldviews).`
    })
], MapboxSearchProviderTraits.prototype, "worldview", void 0);
__decorate([
    primitiveTrait({
        type: "boolean",
        name: "latLonSearchOrder",
        description: `When the user searches using coordinates, should the order be 'latitude, longitude'
    the default is true, which is familar with most users from other platforms.`
    })
], MapboxSearchProviderTraits.prototype, "latLonSearchOrder", void 0);
//# sourceMappingURL=MapboxSearchProviderTraits.js.map