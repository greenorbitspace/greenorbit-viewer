var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import objectTrait from "../Decorators/objectTrait";
import primitiveTrait from "../Decorators/primitiveTrait";
import ModelTraits from "../ModelTraits";
import { traitClass } from "../Trait";
import mixTraits from "../mixTraits";
import CatalogMemberTraits from "./CatalogMemberTraits";
import ImageryProviderTraits from "./ImageryProviderTraits";
import LayerOrderingTraits from "./LayerOrderingTraits";
import LegendOwnerTraits from "./LegendOwnerTraits";
import MappableTraits from "./MappableTraits";
import UrlTraits from "./UrlTraits";
export class CogRenderOptionsTraits extends ModelTraits {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "nodata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "convertToRGB", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resampleMethod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "nearest"
        });
    }
}
__decorate([
    primitiveTrait({
        type: "number",
        name: "No Data Value",
        description: "No data value, default read from tiff meta"
    })
], CogRenderOptionsTraits.prototype, "nodata", void 0);
__decorate([
    primitiveTrait({
        type: "boolean",
        name: "Convert to RGB",
        description: "Try to render multi band cog to RGB, priority 1"
    })
], CogRenderOptionsTraits.prototype, "convertToRGB", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Resample Method",
        description: "Geotiff resample method. Defaults to `bilinear`."
    })
], CogRenderOptionsTraits.prototype, "resampleMethod", void 0);
let CogCatalogItemTraits = class CogCatalogItemTraits extends mixTraits(ImageryProviderTraits, LayerOrderingTraits, UrlTraits, MappableTraits, CatalogMemberTraits, LegendOwnerTraits) {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "renderOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "credit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tileSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hasAlphaChannel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
};
__decorate([
    objectTrait({
        type: CogRenderOptionsTraits,
        name: "Render Options",
        description: "Render options for COGs"
    })
], CogCatalogItemTraits.prototype, "renderOptions", void 0);
__decorate([
    primitiveTrait({
        type: "string",
        name: "Credit",
        description: "Credit for the imagery provider."
    })
], CogCatalogItemTraits.prototype, "credit", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "Tile Size",
        description: "The size of the tile."
    })
], CogCatalogItemTraits.prototype, "tileSize", void 0);
__decorate([
    primitiveTrait({
        type: "boolean",
        name: "Has Alpha Channel",
        description: "Whether the imagery has an alpha channel."
    })
], CogCatalogItemTraits.prototype, "hasAlphaChannel", void 0);
__decorate([
    primitiveTrait({
        type: "number",
        name: "Cache",
        description: "Cache survival time in milliseconds."
    })
], CogCatalogItemTraits.prototype, "cache", void 0);
CogCatalogItemTraits = __decorate([
    traitClass({
        description: "Creates a Cloud Optimised Geotiff item in the catalog from a url pointing to a TIFF that is a valid COG.",
        example: {
            name: "COG Test Uluru",
            description: "This is a COG from Sentinel-2 L2A, in EPSG:32752. Does it display in correct location? Does it display correctly?",
            type: "cog",
            url: "https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/52/J/FS/2023/5/S2A_52JFS_20230501_0_L2A/TCI.tif"
        }
    })
], CogCatalogItemTraits);
export default CogCatalogItemTraits;
//# sourceMappingURL=CogCatalogItemTraits.js.map