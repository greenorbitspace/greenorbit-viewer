var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { computed, makeObservable, override } from "mobx";
import FunctionParameter from "./FunctionParameter";
class NumberParameter extends FunctionParameter {
    get rangeDescription() {
        if (this.minimum !== undefined && this.maximum !== undefined) {
            return `: must be between ${this.minimum} to ${this.maximum}`;
        }
        else if (this.minimum !== undefined) {
            return `: at least ${this.minimum}`;
        }
        else if (this.maximum !== undefined) {
            return `: at most ${this.maximum}`;
        }
        else {
            return "";
        }
    }
    get value() {
        var _a;
        return (_a = super.value) !== null && _a !== void 0 ? _a : this.defaultValue;
    }
    get isValid() {
        return super.value === undefined
            ? this.isValidRange
            : this.isValidRange && super.isValid;
    }
    get isValidRange() {
        let value = this.value !== undefined ? this.value : this.defaultValue;
        if (typeof value === "string") {
            value = parseFloat(value);
        }
        if (this.minimum !== undefined && value < this.minimum) {
            return false;
        }
        if (this.maximum !== undefined && value > this.maximum) {
            return false;
        }
        return true;
    }
    constructor(catalogFunction, options) {
        super(catalogFunction, options);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "number"
        });
        Object.defineProperty(this, "minimum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "maximum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "defaultValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        makeObservable(this);
        this.minimum = options.minimum;
        this.maximum = options.maximum;
        this.defaultValue = options.defaultValue;
    }
}
Object.defineProperty(NumberParameter, "type", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "number"
});
export default NumberParameter;
__decorate([
    computed
], NumberParameter.prototype, "rangeDescription", null);
__decorate([
    override
], NumberParameter.prototype, "value", null);
__decorate([
    override
], NumberParameter.prototype, "isValid", null);
//# sourceMappingURL=NumberParameter.js.map