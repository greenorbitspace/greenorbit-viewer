var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import i18next from "i18next";
import { computed, makeObservable, observable, override, runInAction, toJS } from "mobx";
import BoundingSphere from "terriajs-cesium/Source/Core/BoundingSphere";
import Cartesian2 from "terriajs-cesium/Source/Core/Cartesian2";
import isDefined from "../../../Core/isDefined";
import I3SCatalogItemTraits from "../../../Traits/TraitsClasses/I3SCatalogItemTraits";
import CreateModel from "../../Definition/CreateModel";
import MappableMixin from "../../../ModelMixins/MappableMixin";
import UrlMixin from "../../../ModelMixins/UrlMixin";
import I3SDataProvider from "terriajs-cesium/Source/Scene/I3SDataProvider";
import CatalogMemberMixin, { getName } from "../../../ModelMixins/CatalogMemberMixin";
import ArcGISTiledElevationTerrainProvider from "terriajs-cesium/Source/Core/ArcGISTiledElevationTerrainProvider";
import Cesium3dTilesStyleMixin from "../../../ModelMixins/Cesium3dTilesStyleMixin";
import ShadowMixin from "../../../ModelMixins/ShadowMixin";
import Cesium3DTileColorBlendMode from "terriajs-cesium/Source/Scene/Cesium3DTileColorBlendMode";
import FeatureInfoUrlTemplateMixin from "../../../ModelMixins/FeatureInfoUrlTemplateMixin";
import TerriaFeature from "../../Feature/Feature";
class I3SCatalogItem extends Cesium3dTilesStyleMixin(FeatureInfoUrlTemplateMixin(ShadowMixin(MappableMixin(UrlMixin(CatalogMemberMixin(CreateModel(I3SCatalogItemTraits))))))) {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: I3SCatalogItem.type
        });
        Object.defineProperty(this, "dataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        makeObservable(this);
    }
    get boundingSphere() {
        var _a;
        if ((_a = this.dataProvider) === null || _a === void 0 ? void 0 : _a.layers) {
            return BoundingSphere.fromBoundingSpheres(this.dataProvider.layers
                .map((layer) => { var _a; return (_a = layer.tileset) === null || _a === void 0 ? void 0 : _a.boundingSphere; })
                .filter(isDefined));
        }
    }
    async forceLoadMapItems() {
        if (!isDefined(this.url)) {
            throw `\`url\` is not defined for ${getName(this)}`;
        }
        const i3sProvider = await I3SDataProvider.fromUrl(this.url, {
            showFeatures: this.allowFeaturePicking,
            geoidTiledTerrainProvider: this.terrainURL
                ? await ArcGISTiledElevationTerrainProvider.fromUrl(this.terrainURL)
                : undefined
        });
        runInAction(() => {
            this.dataProvider = i3sProvider;
        });
    }
    /**
     * This function should return null if allowFeaturePicking = false
     * @param _screenPosition
     * @param pickResult
     */
    buildFeatureFromPickResult(_screenPosition, pickResult) {
        if (this.allowFeaturePicking &&
            isDefined(pickResult.content) &&
            isDefined(pickResult.content.tile.i3sNode) &&
            isDefined(pickResult.featureId) &&
            _screenPosition) {
            const i3sNode = pickResult.content.tile.i3sNode;
            return i3sNode.loadFields().then(() => {
                const fields = i3sNode.getFieldsForFeature(pickResult.featureId);
                const result = new TerriaFeature({
                    properties: fields
                });
                result._cesium3DTileFeature = pickResult;
                return result;
            });
        }
        return undefined;
    }
    get mapItems() {
        if (this.isLoadingMapItems || !isDefined(this.dataProvider)) {
            return [];
        }
        if (this.dataProvider.isDestroyed()) {
            this.forceLoadMapItems();
        }
        if (this.dataProvider) {
            this.dataProvider.show = this.show;
            this.dataProvider.layers.forEach((layer) => {
                const tileset = layer.tileset;
                if (tileset) {
                    tileset.style = toJS(this.cesiumTileStyle);
                    tileset.shadows = this.cesiumShadows;
                    // @ts-expect-error - Attach terria catalog item to tileset
                    tileset._catalogItem = this;
                    if (this.lightingFactor && tileset.imageBasedLighting) {
                        tileset.imageBasedLighting.imageBasedLightingFactor =
                            new Cartesian2(...this.lightingFactor);
                    }
                    const key = this
                        .colorBlendMode;
                    const colorBlendMode = Cesium3DTileColorBlendMode[key];
                    if (colorBlendMode !== undefined)
                        tileset.colorBlendMode = colorBlendMode;
                    tileset.colorBlendAmount = this.colorBlendAmount;
                }
            });
        }
        return [this.dataProvider];
    }
    get shortReport() {
        if (this.terria.currentViewer.type === "Leaflet") {
            return i18next.t("models.commonModelErrors.3dTypeIn2dMode", this);
        }
        return super.shortReport;
    }
    get typeName() {
        return i18next.t("core.dataType.i3s");
    }
}
Object.defineProperty(I3SCatalogItem, "type", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "i3s"
});
export default I3SCatalogItem;
__decorate([
    observable
], I3SCatalogItem.prototype, "dataProvider", void 0);
__decorate([
    computed
], I3SCatalogItem.prototype, "boundingSphere", null);
__decorate([
    computed
], I3SCatalogItem.prototype, "mapItems", null);
__decorate([
    override
], I3SCatalogItem.prototype, "shortReport", null);
//# sourceMappingURL=I3SCatalogItem.js.map