var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import i18next from "i18next";
import uniqWith from "lodash-es/uniqWith";
import { computed, makeObservable, override, runInAction } from "mobx";
import GeographicTilingScheme from "terriajs-cesium/Source/Core/GeographicTilingScheme";
import JulianDate from "terriajs-cesium/Source/Core/JulianDate";
import WebMercatorTilingScheme from "terriajs-cesium/Source/Core/WebMercatorTilingScheme";
import URI from "urijs";
import AsyncLoader from "../../../Core/AsyncLoader";
import { isJsonObject } from "../../../Core/Json";
import TerriaError from "../../../Core/TerriaError";
import createDiscreteTimesFromIsoSegments from "../../../Core/createDiscreteTimes";
import createTransformerAllowUndefined from "../../../Core/createTransformerAllowUndefined";
import filterOutUndefined from "../../../Core/filterOutUndefined";
import isDefined from "../../../Core/isDefined";
import loadJson from "../../../Core/loadJson";
import replaceUnderscores from "../../../Core/replaceUnderscores";
import { scaleDenominatorToLevel } from "../../../Core/scaleToDenominator";
import ArcGisImageServerImageryProvider from "../../../Map/ImageryProvider/ArcGisImageServerImageryProvider";
import Reproject from "../../../Map/Vector/Reproject";
import CatalogMemberMixin from "../../../ModelMixins/CatalogMemberMixin";
import DiscretelyTimeVaryingMixin from "../../../ModelMixins/DiscretelyTimeVaryingMixin";
import MappableMixin from "../../../ModelMixins/MappableMixin";
import MinMaxLevelMixin from "../../../ModelMixins/MinMaxLevelMixin";
import UrlMixin from "../../../ModelMixins/UrlMixin";
import ArcGisImageServerCatalogItemTraits, { ArcGisImageServerAvailableRasterFunctionTraits, ArcGisImageServerRenderingRule } from "../../../Traits/TraitsClasses/ArcGisImageServerCatalogItemTraits";
import LegendTraits, { LegendItemTraits } from "../../../Traits/TraitsClasses/LegendTraits";
import CreateModel from "../../Definition/CreateModel";
import LoadableStratum from "../../Definition/LoadableStratum";
import StratumOrder from "../../Definition/StratumOrder";
import createStratumInstance from "../../Definition/createStratumInstance";
import getToken from "../../getToken";
import proxyCatalogItemUrl from "../proxyCatalogItemUrl";
import { getRectangleFromLayer } from "./ArcGisMapServerCatalogItem";
class ImageServerStratum extends LoadableStratum(ArcGisImageServerCatalogItemTraits) {
    constructor(_item, imageServer, _token) {
        super();
        Object.defineProperty(this, "_item", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _item
        });
        Object.defineProperty(this, "imageServer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: imageServer
        });
        Object.defineProperty(this, "_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _token
        });
        makeObservable(this);
    }
    duplicateLoadableStratum(newModel) {
        return new ImageServerStratum(newModel, this.imageServer, this._token);
    }
    static async load(item) {
        var _a, _b, _c, _d;
        if (!isDefined(item.uri)) {
            throw new TerriaError({
                title: i18next.t("models.arcGisImageServerCatalogItem.invalidUrlTitle"),
                message: i18next.t("models.arcGisImageServerCatalogItem.invalidUrlMessage")
            });
        }
        let token;
        if (isDefined(item.tokenUrl) && isDefined(item.url)) {
            token = await getToken(item.terria, item.tokenUrl, item.url);
        }
        let serviceUri = getBaseURI(item);
        if (isDefined(token)) {
            serviceUri = serviceUri.addQuery("token", token);
        }
        const serviceMetadata = await getJson(item, serviceUri);
        if (!isDefined(serviceMetadata)) {
            throw new TerriaError({
                title: i18next.t("models.arcGisService.invalidServerTitle"),
                message: i18next.t("models.arcGisService.invalidServerMessage")
            });
        }
        if (!((_a = serviceMetadata.capabilities) === null || _a === void 0 ? void 0 : _a.includes("Image")))
            throw new TerriaError({
                title: i18next.t("models.arcGisImageServerCatalogItem.invalidServiceTitle"),
                message: i18next.t("models.arcGisImageServerCatalogItem.invalidServiceMessage")
            });
        // Add any Proj4 definitions if necessary
        const epsgCode = (_c = (_b = serviceMetadata.fullExtent.spatialReference) === null || _b === void 0 ? void 0 : _b.latestWkid) !== null && _c !== void 0 ? _c : (_d = serviceMetadata.fullExtent.spatialReference) === null || _d === void 0 ? void 0 : _d.wkid;
        if (epsgCode && item.terria.configParameters.proj4ServiceBaseUrl) {
            await Reproject.checkProjection(item.terria.configParameters.proj4ServiceBaseUrl, `EPSG:${epsgCode}`);
        }
        const stratum = new ImageServerStratum(item, serviceMetadata, token);
        return stratum;
    }
    get name() {
        return replaceUnderscores(this.imageServer.name);
    }
    get cacheDuration() {
        return "1d";
    }
    get rectangle() {
        const rectangle = {
            west: Infinity,
            south: Infinity,
            east: -Infinity,
            north: -Infinity
        };
        getRectangleFromLayer(this.imageServer.fullExtent, rectangle);
        if (rectangle.west === Infinity ||
            rectangle.south === Infinity ||
            rectangle.east === -Infinity ||
            rectangle.north === -Infinity)
            return undefined;
        return rectangle;
    }
    get description() {
        return this.imageServer.description;
    }
    get attribution() {
        return this.imageServer.copyrightText;
    }
    get token() {
        return this._token;
    }
    /** Disable pre-cached tiles if we are making dynamic requests - using parameters, time or rendering rule. */
    get usePreCachedTiles() {
        var _a, _b, _c;
        if (this._item.parameters ||
            this._item.currentDiscreteJulianDate ||
            this._item.renderingRule.rasterFunction)
            return false;
        // We only support web mercator or wgs84
        if (isDefined(this.imageServer.tileInfo)) {
            const wkid = (_b = (_a = this.imageServer.tileInfo.spatialReference) === null || _a === void 0 ? void 0 : _a.latestWkid) !== null && _b !== void 0 ? _b : (_c = this.imageServer.tileInfo.spatialReference) === null || _c === void 0 ? void 0 : _c.wkid;
            if (wkid === 102100 || wkid === 102113 || wkid === 3857 || wkid === 4326)
                return true;
        }
        return false;
    }
    /** Override wkid to web mercator if using pre-cached tiles (and web mercator is supported) */
    get wkid() {
        var _a;
        if (this._item.usePreCachedTiles) {
            const wkid = (_a = this.imageServer.tileInfo) === null || _a === void 0 ? void 0 : _a.spatialReference.wkid;
            if (wkid === 102100 || wkid === 102113 || wkid === 3857 || wkid === 4326)
                return wkid;
        }
    }
    get tileHeight() {
        var _a;
        if (this._item.usePreCachedTiles)
            return (_a = this.imageServer.tileInfo) === null || _a === void 0 ? void 0 : _a.rows;
    }
    get tileWidth() {
        var _a;
        if (this._item.usePreCachedTiles)
            return (_a = this.imageServer.tileInfo) === null || _a === void 0 ? void 0 : _a.cols;
    }
    get maximumScale() {
        return this.imageServer.maxScale;
    }
    get maximumLevel() {
        var _a;
        const maximumLevelFromScale = scaleDenominatorToLevel(this._item.maximumScale, true, false);
        // Make sure the maximum level is not higher than the maximum level of the server tiles
        if (this._item.usePreCachedTiles && ((_a = this.imageServer.tileInfo) === null || _a === void 0 ? void 0 : _a.lods))
            return Math.min(this.imageServer.tileInfo.lods[this.imageServer.tileInfo.lods.length - 1].level, maximumLevelFromScale !== null && maximumLevelFromScale !== void 0 ? maximumLevelFromScale : Infinity);
        return maximumLevelFromScale;
    }
    get minimumLevel() {
        var _a;
        if (this._item.usePreCachedTiles && ((_a = this.imageServer.tileInfo) === null || _a === void 0 ? void 0 : _a.lods))
            return this.imageServer.tileInfo.lods[0].level;
    }
    get allowRasterFunction() {
        return this.imageServer.allowRasterFunction;
    }
    get availableRasterFunctions() {
        var _a;
        if (!this._item.allowRasterFunction)
            return [];
        return (_a = this.imageServer) === null || _a === void 0 ? void 0 : _a.rasterFunctionInfos.filter((rasterFn) => rasterFn.name && rasterFn.name !== "None").map((rasterFn) => {
            return createStratumInstance(ArcGisImageServerAvailableRasterFunctionTraits, {
                name: rasterFn.name,
                description: rasterFn.description !== "A raster function template."
                    ? rasterFn.description
                    : undefined,
                help: rasterFn.help
            });
        });
    }
    get disableRasterFunctionSelectors() {
        return !this._item.allowRasterFunction;
    }
}
Object.defineProperty(ImageServerStratum, "stratumName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "arcgisImageserver"
});
__decorate([
    computed
], ImageServerStratum.prototype, "usePreCachedTiles", null);
StratumOrder.addLoadStratum(ImageServerStratum.stratumName);
class ImageServerLegendStratum extends LoadableStratum(ArcGisImageServerCatalogItemTraits) {
    constructor(_item, _legends) {
        super();
        Object.defineProperty(this, "_item", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _item
        });
        Object.defineProperty(this, "_legends", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _legends
        });
        makeObservable(this);
    }
    duplicateLoadableStratum(newModel) {
        return new ImageServerLegendStratum(newModel, this._legends);
    }
    static async load(item) {
        if (!isDefined(item.uri)) {
            throw new TerriaError({
                title: i18next.t("models.arcGisImageServerCatalogItem.invalidUrlTitle"),
                message: i18next.t("models.arcGisImageServerCatalogItem.invalidUrlMessage")
            });
        }
        let legendUri = getBaseURI(item).segment("legend");
        legendUri.addQuery(item.flattenedParameters);
        if (isDefined(item.token)) {
            legendUri = legendUri.addQuery("token", item.token);
        }
        const legendMetadata = await getJson(item, legendUri);
        const stratum = new ImageServerLegendStratum(item, legendMetadata);
        return stratum;
    }
    get legends() {
        var _a;
        const noDataRegex = /^No[\s_-]?Data$/i;
        const labelsRegex = /_Labels$/;
        let items = [];
        (((_a = this._legends) === null || _a === void 0 ? void 0 : _a.layers) || []).forEach((l) => {
            var _a;
            if (noDataRegex.test(l.layerName) || labelsRegex.test(l.layerName)) {
                return;
            }
            (_a = l.legend) === null || _a === void 0 ? void 0 : _a.forEach((leg) => {
                const title = replaceUnderscores(leg.label !== "" ? leg.label : l.layerName);
                const dataUrl = "data:" + leg.contentType + ";base64," + leg.imageData;
                items.push(createStratumInstance(LegendItemTraits, {
                    title,
                    imageUrl: dataUrl,
                    imageWidth: leg.width,
                    imageHeight: leg.height
                }));
            });
        });
        items = uniqWith(items, (a, b) => a.imageUrl === b.imageUrl);
        return [createStratumInstance(LegendTraits, { items })];
    }
}
Object.defineProperty(ImageServerLegendStratum, "stratumName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "arcgisImageserverLegend"
});
__decorate([
    computed
], ImageServerLegendStratum.prototype, "legends", null);
StratumOrder.addLoadStratum(ImageServerLegendStratum.stratumName);
class ArcGisImageServerCatalogItem extends UrlMixin(DiscretelyTimeVaryingMixin(MinMaxLevelMixin(CatalogMemberMixin(MappableMixin(CreateModel(ArcGisImageServerCatalogItemTraits)))))) {
    constructor(...args) {
        super(...args);
        Object.defineProperty(this, "_legendStratumLoader", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new AsyncLoader(this.forceLoadLegends.bind(this))
        });
        Object.defineProperty(this, "_createImageryProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: createTransformerAllowUndefined((time) => {
                var _a;
                if (!isDefined(this.url)) {
                    return undefined;
                }
                const params = { ...this.flattenedParameters };
                if (time)
                    params.time = JulianDate.toDate(time).getTime();
                let tilingScheme;
                if (this.wkid === 102100 || this.wkid === 102113 || this.wkid === 3857) {
                    tilingScheme = new WebMercatorTilingScheme();
                }
                else if (this.wkid === 4326) {
                    tilingScheme = new GeographicTilingScheme();
                }
                else {
                    throw TerriaError.from(`Tile spatial reference WKID ${this.wkid} is not supported.`);
                }
                return new ArcGisImageServerImageryProvider({
                    url: cleanAndProxyUrl(this, this.url),
                    tilingScheme: tilingScheme,
                    maximumLevel: this.maximumLevel,
                    minimumLevel: this.minimumLevel,
                    tileHeight: this.tileHeight,
                    tileWidth: this.tileWidth,
                    parameters: params,
                    enablePickFeatures: this.allowFeaturePicking,
                    usePreCachedTiles: this.usePreCachedTiles,
                    token: this.token,
                    credit: (_a = this.attribution) !== null && _a !== void 0 ? _a : ""
                });
            })
        });
        makeObservable(this);
    }
    get typeName() {
        return i18next.t("models.arcGisImageServerCatalogItem.name");
    }
    get type() {
        return ArcGisImageServerCatalogItem.type;
    }
    async forceLoadMetadata() {
        const stratum = await ImageServerStratum.load(this);
        runInAction(() => {
            this.strata.set(ImageServerStratum.stratumName, stratum);
        });
        await this._legendStratumLoader.load();
    }
    async forceLoadLegends() {
        const stratum = await ImageServerLegendStratum.load(this);
        runInAction(() => {
            this.strata.set(ImageServerLegendStratum.stratumName, stratum);
        });
    }
    forceLoadMapItems() {
        return Promise.resolve();
    }
    get discreteTimes() {
        const imageServerStratum = this.strata.get(ImageServerStratum.stratumName);
        if ((imageServerStratum === null || imageServerStratum === void 0 ? void 0 : imageServerStratum.imageServer.timeInfo) === undefined)
            return undefined;
        const result = [];
        createDiscreteTimesFromIsoSegments(result, new Date(imageServerStratum.imageServer.timeInfo.timeExtent[0]).toISOString(), new Date(imageServerStratum.imageServer.timeInfo.timeExtent[1]).toISOString(), undefined, this.maxRefreshIntervals);
        return result;
    }
    get _currentImageryParts() {
        // Make sure legend stays up to date
        this._legendStratumLoader.load();
        const imageryProvider = this._createImageryProvider(this.currentDiscreteJulianDate);
        if (imageryProvider) {
            return {
                imageryProvider,
                alpha: this.opacity,
                show: this.show,
                clippingRectangle: this.clipToRectangle
                    ? this.cesiumRectangle
                    : undefined
            };
        }
    }
    get _nextImageryParts() {
        if (this.terria.timelineStack.contains(this) &&
            !this.isPaused &&
            this.nextDiscreteTimeTag) {
            const imageryProvider = this._createImageryProvider(this.nextDiscreteJulianDate);
            if (imageryProvider) {
                imageryProvider.enablePickFeatures = false;
                return {
                    imageryProvider,
                    alpha: 0.0,
                    show: true,
                    clippingRectangle: this.clipToRectangle
                        ? this.cesiumRectangle
                        : undefined
                };
            }
        }
        else {
            return undefined;
        }
    }
    /** Flatten nested JSON parameters (stringify them). These are applied onto ArcGisImageServerImageryProvider requests.
     * This will include renderingRule and bandIds if they are set.
     */
    get flattenedParameters() {
        var _a;
        const params = Object.entries((_a = this.parameters) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (isJsonObject(value))
                acc[key] = JSON.stringify(value);
            else
                acc[key] = value;
            return acc;
        }, {});
        if (this.renderingRule.rasterFunction)
            params.renderingRule = JSON.stringify(this.traits["renderingRule"].toJson(this.renderingRule));
        if (this.bandIds)
            params.bandIds = this.bandIds.join(",");
        return params;
    }
    get mapItems() {
        if (this.isLoadingMetadata)
            return [];
        return [this._currentImageryParts, this._nextImageryParts].filter(isDefined);
    }
    get selectableDimensions() {
        return filterOutUndefined([
            ...super.selectableDimensions,
            this.rasterFunctionSelectableDimensions
        ]);
    }
    get rasterFunctionSelectableDimensions() {
        var _a;
        if (this.disableRasterFunctionSelectors)
            return undefined;
        return {
            id: "raster-functions",
            name: i18next.t("models.arcGisImageServerCatalogItem.rasterFunction"),
            options: this.availableRasterFunctions.map((rasterFn) => ({
                id: rasterFn.name,
                name: rasterFn.name,
                description: rasterFn.description
            })),
            selectedId: (_a = this.renderingRule) === null || _a === void 0 ? void 0 : _a.rasterFunction,
            allowUndefined: true,
            undefinedLabel: "Default",
            setDimensionValue: (strata, rasterFunction) => {
                if (!this.renderingRule) {
                    this.setTrait(strata, "renderingRule", createStratumInstance(ArcGisImageServerRenderingRule, {
                        rasterFunction
                    }));
                }
                else {
                    this.renderingRule.setTrait(strata, "rasterFunction", rasterFunction);
                }
            }
        };
    }
}
Object.defineProperty(ArcGisImageServerCatalogItem, "type", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "esri-imageServer"
});
export default ArcGisImageServerCatalogItem;
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "discreteTimes", null);
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "_currentImageryParts", null);
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "_nextImageryParts", null);
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "flattenedParameters", null);
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "mapItems", null);
__decorate([
    override
], ArcGisImageServerCatalogItem.prototype, "selectableDimensions", null);
__decorate([
    computed
], ArcGisImageServerCatalogItem.prototype, "rasterFunctionSelectableDimensions", null);
function getBaseURI(item) {
    const uri = new URI(item.url);
    const lastSegment = uri.segment(-1);
    if (lastSegment && lastSegment.match(/\d+/)) {
        uri.segment(-1, "");
    }
    return uri;
}
async function getJson(item, uri) {
    try {
        const response = await loadJson(proxyCatalogItemUrl(item, uri.addQuery("f", "json").toString()));
        return response;
    }
    catch (err) {
        console.log(err);
        return undefined;
    }
}
function cleanAndProxyUrl(catalogItem, url) {
    return proxyCatalogItemUrl(catalogItem, cleanUrl(url));
}
function cleanUrl(url) {
    // Strip off the search portion of the URL
    const uri = new URI(url);
    uri.search("");
    return uri.toString();
}
//# sourceMappingURL=ArcGisImageServerCatalogItem.js.map