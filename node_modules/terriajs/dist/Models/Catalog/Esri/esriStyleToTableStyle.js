import Color from "terriajs-cesium/Source/Core/Color";
import isDefined from "../../../Core/isDefined";
import { OutlineSymbolTraits } from "../../../Traits/TraitsClasses/Table/OutlineStyleTraits";
import TablePointSizeStyleTraits from "../../../Traits/TraitsClasses/Table/PointSizeStyleTraits";
import { PointSymbolTraits } from "../../../Traits/TraitsClasses/Table/PointStyleTraits";
import createStratumInstance from "../../Definition/createStratumInstance";
export function esriStyleToTableStyle(esriStyle, label) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    if (!esriStyle)
        return {};
    return {
        // For esriPMS - just use white color
        // This is so marker icons aren't colored by default
        color: esriStyle.type === "esriPMS"
            ? "#FFFFFF"
            : (_a = convertEsriColorToCesiumColor(esriStyle.color)) === null || _a === void 0 ? void 0 : _a.toCssColorString(),
        pointSize: createStratumInstance(TablePointSizeStyleTraits, {}),
        point: createStratumInstance(PointSymbolTraits, {
            marker: esriStyle.type === "esriPMS"
                ? `data:${esriStyle.contentType};base64,${esriStyle.imageData}`
                : convertEsriMarkerToMaki(esriStyle.style),
            // symbol.size is used by "esriSMS"
            // height and width is used by "esriPMS"
            height: (_b = convertEsriPointSizeToPixels(esriStyle.size)) !== null && _b !== void 0 ? _b : convertEsriPointSizeToPixels(esriStyle.height),
            width: (_c = convertEsriPointSizeToPixels(esriStyle.size)) !== null && _c !== void 0 ? _c : convertEsriPointSizeToPixels(esriStyle.width),
            rotation: esriStyle.angle,
            pixelOffset: [(_d = esriStyle.xoffset) !== null && _d !== void 0 ? _d : 0, (_e = esriStyle.yoffset) !== null && _e !== void 0 ? _e : 0],
            legendTitle: label || undefined
        }),
        outline: ((_f = esriStyle.outline) === null || _f === void 0 ? void 0 : _f.style) !== "esriSLSNull"
            ? createStratumInstance(OutlineSymbolTraits, {
                color: esriStyle.type === "esriSLS"
                    ? (_g = convertEsriColorToCesiumColor(esriStyle.color)) === null || _g === void 0 ? void 0 : _g.toCssColorString()
                    : (_j = convertEsriColorToCesiumColor((_h = esriStyle.outline) === null || _h === void 0 ? void 0 : _h.color)) === null || _j === void 0 ? void 0 : _j.toCssColorString(),
                // Use width if Line style
                width: esriStyle.type === "esriSLS"
                    ? convertEsriPointSizeToPixels(esriStyle.width)
                    : convertEsriPointSizeToPixels((_k = esriStyle.outline) === null || _k === void 0 ? void 0 : _k.width),
                legendTitle: label || undefined,
                dash: esriStyle.type === "esriSLS"
                    ? convertEsriLineStyleToDashArray(esriStyle.style)
                    : convertEsriLineStyleToDashArray((_l = esriStyle.outline) === null || _l === void 0 ? void 0 : _l.style)
            })
            : undefined
    };
}
function convertEsriMarkerToMaki(esri) {
    switch (esri) {
        case "esriSMSCross":
            return "hospital";
        case "esriSMSDiamond":
            return "diamond";
        case "esriSMSSquare":
            return "square";
        case "esriSMSTriangle":
            return "triangle";
        case "esriSMSX":
            return "cross";
        case "esriSMSCircle":
        default:
            return "point";
    }
}
// ESRI uses points for styling while cesium uses pixels
export function convertEsriPointSizeToPixels(pointSize) {
    if (!isDefined(pointSize))
        return undefined;
    // 1 px = 0.75 point
    // 1 point = 4/3 point
    return (pointSize * 4) / 3;
}
function convertEsriColorToCesiumColor(esriColor) {
    if (!esriColor)
        return;
    return Color.fromBytes(esriColor[0], esriColor[1], esriColor[2], esriColor[3]);
}
const defaultDashArray = [4, 3];
const esriLineStyleCesium = {
    esriSLSNull: 0,
    esriSLSSolid: 255,
    esriSLSDash: 3087, //"   ----" parseInt("110000001111", 2)
    esriSLSDot: 7, //"   -"
    esriSLSDashDot: 2017, //"   ----   -"
    esriSLSDashDotDot: 16273, // '  --------   -   - '
    esriSLSLongDash: 2047, // '   --------'
    esriSLSLongDashDot: 4081, // '   --------   -'
    esriSLSShortDash: 4095, //' ----'
    esriSLSShortDot: 13107, //' ---- -'
    esriSLSShortDashDot: 8179, //' ---- - -'
    esriSLSShortDashDotDot: 16281 //' - - - -'
};
const cesiumDashNumberToDashArray = {
    0: [],
    255: [],
    3087: [6, 6],
    7: [1, 3],
    2017: [4, 3, 1, 3],
    16273: [8, 3, 1, 3, 1, 3],
    2047: [8, 3],
    4081: [8, 3, 1, 3],
    4095: [4, 1],
    13107: [1, 1],
    8179: [4, 1, 1, 1],
    16281: [4, 1, 1, 1, 1, 1]
};
export function convertCesiumDashNumberToDashArray(dashPattern) {
    if (cesiumDashNumberToDashArray[dashPattern]) {
        return cesiumDashNumberToDashArray[dashPattern];
    }
    return defaultDashArray;
}
export function convertEsriLineStyleToCesiumDashNumber(styleName) {
    if (styleName in esriLineStyleCesium) {
        return esriLineStyleCesium[styleName];
    }
    return undefined;
}
function convertEsriLineStyleToDashArray(styleName) {
    if (styleName) {
        const dashNumber = convertEsriLineStyleToCesiumDashNumber(styleName);
        if (dashNumber !== undefined) {
            return convertCesiumDashNumberToDashArray(dashNumber);
        }
    }
    return [];
}
//# sourceMappingURL=esriStyleToTableStyle.js.map