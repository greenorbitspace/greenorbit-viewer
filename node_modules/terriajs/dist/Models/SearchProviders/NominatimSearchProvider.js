import { makeObservable, runInAction } from "mobx";
import Rectangle from "terriajs-cesium/Source/Core/Rectangle";
import CesiumMath from "terriajs-cesium/Source/Core/Math";
import { Category, SearchAction } from "../../Core/AnalyticEvents/analyticEvents";
import loadJson from "../../Core/loadJson";
import LocationSearchProviderMixin from "../../ModelMixins/SearchProviders/LocationSearchProviderMixin";
import NominatimSearchProviderTraits from "../../Traits/SearchProviders/NominatimSearchProviderTraits";
import CreateModel from "../Definition/CreateModel";
import SearchResult from "./SearchResult";
import Resource from "terriajs-cesium/Source/Core/Resource";
class NominatimSearchProvider extends LocationSearchProviderMixin(CreateModel(NominatimSearchProviderTraits)) {
    get type() {
        return NominatimSearchProvider.type;
    }
    constructor(uniqueId, terria) {
        super(uniqueId, terria);
        makeObservable(this);
    }
    logEvent(searchText) {
        var _a;
        (_a = this.terria.analytics) === null || _a === void 0 ? void 0 : _a.logEvent(Category.search, SearchAction.nominatim, searchText);
    }
    doSearch(searchText, searchResults) {
        searchResults.results.length = 0;
        searchResults.message = undefined;
        const view = this.terria.currentViewer.getCurrentCameraView();
        const bboxStr = CesiumMath.toDegrees(view.rectangle.west) +
            ", " +
            CesiumMath.toDegrees(view.rectangle.north) +
            ", " +
            CesiumMath.toDegrees(view.rectangle.east) +
            ", " +
            CesiumMath.toDegrees(view.rectangle.south);
        const promise = loadJson(new Resource({
            url: this.url,
            queryParameters: {
                q: searchText,
                viewbox: bboxStr,
                bounded: 0,
                format: "geojson",
                countrycodes: this.countryCodes,
                limit: this.maxResults
            }
        }));
        return promise
            .then((result) => {
            if (searchResults.isCanceled) {
                // A new search has superseded this one, so ignore the result.
                return;
            }
            if (!(result === null || result === void 0 ? void 0 : result.features) ||
                !Array.isArray(result.features) ||
                result.features.length === 0) {
                searchResults.message = {
                    content: "translate#viewModels.searchNoLocations"
                };
                return;
            }
            const locations = result.features
                .filter((feat) => feat.properties && feat.geometry && feat.properties.display_name)
                .sort((a, b) => b.properties.importance - a.properties.importance)
                .map((feat) => {
                return new SearchResult({
                    name: feat.properties.display_name,
                    clickAction: createZoomToFunction(this, feat),
                    location: {
                        latitude: feat.geometry.coordinates[1],
                        longitude: feat.geometry.coordinates[0]
                    }
                });
            });
            runInAction(() => {
                searchResults.results.push(...locations);
            });
            if (searchResults.results.length === 0) {
                searchResults.message = {
                    content: "translate#viewModels.searchNoLocations"
                };
            }
        })
            .catch(() => {
            if (searchResults.isCanceled) {
                // A new search has superseded this one, so ignore the result.
                return;
            }
            searchResults.message = {
                content: "translate#viewModels.searchErrorOccurred"
            };
        });
    }
}
Object.defineProperty(NominatimSearchProvider, "type", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "nominatim-search-provider"
});
export default NominatimSearchProvider;
function createZoomToFunction(model, resource) {
    const [west, south, east, north] = resource.bbox;
    const rectangle = Rectangle.fromDegrees(west, south, east, north);
    return function () {
        const terria = model.terria;
        terria.currentViewer.zoomTo(rectangle, model.flightDurationSeconds);
    };
}
//# sourceMappingURL=NominatimSearchProvider.js.map