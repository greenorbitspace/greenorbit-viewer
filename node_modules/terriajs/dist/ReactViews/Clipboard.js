import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import styled from "styled-components";
import Box from "../Styled/Box";
import Button from "../Styled/Button";
import Icon, { StyledIcon } from "../Styled/Icon";
import Input from "../Styled/Input";
import { verticalAlign } from "../Styled/mixins";
import Spacing from "../Styled/Spacing";
var CopyStatus;
(function (CopyStatus) {
    CopyStatus[CopyStatus["Success"] = 0] = "Success";
    CopyStatus[CopyStatus["Error"] = 1] = "Error";
    CopyStatus[CopyStatus["Default"] = 2] = "Default";
})(CopyStatus || (CopyStatus = {}));
const Clipboard = (props) => {
    const { theme, rounded, text, inputTheme, inputPlaceholder, onCopy } = props;
    const { t } = useTranslation();
    const [status, setStatus] = useState(CopyStatus.Default);
    const handleCopy = async () => {
        try {
            if (text) {
                await navigator.clipboard.writeText(text);
                setStatus(CopyStatus.Success);
                if (onCopy)
                    onCopy(text);
            }
            else {
                setStatus(CopyStatus.Error);
            }
        }
        catch {
            setStatus(CopyStatus.Error);
        }
    };
    useEffect(() => {
        var _a;
        if (status === CopyStatus.Success || status === CopyStatus.Error) {
            const timer = setTimeout(() => {
                setStatus(CopyStatus.Default);
            }, (_a = props.timeout) !== null && _a !== void 0 ? _a : 3000);
            return () => clearTimeout(timer);
        }
    }, [status, props.timeout]);
    const isLightTheme = theme === "light";
    const canCopy = !!navigator.clipboard;
    return (_jsxs(ClipboardDiv, { children: [_jsxs(Box, { children: [_jsx(Input, { light: inputTheme === "light", dark: inputTheme === "dark", large: true, type: "text", value: text, placeholder: inputPlaceholder !== null && inputPlaceholder !== void 0 ? inputPlaceholder : t("share.shortLinkShortening"), readOnly: true, onClick: (e) => e.currentTarget.select(), css: `
            ${rounded && canCopy && "border-radius: 32px 0 0 32px;"}
            ${rounded && !canCopy && "border-radius: 32px;"}
          ` }), canCopy && (_jsx(Button, { onClick: handleCopy, primary: true, css: `
              width: 80px;
              border-radius: 0 2px 2px 0;
              ${rounded && `border-radius:  0 32px 32px 0;`}
            `, textProps: { large: true }, children: t("clipboard.copy") }))] }), canCopy && status !== CopyStatus.Default && (_jsxs(_Fragment, { children: [_jsx(Spacing, { bottom: 2 }), _jsxs(Box, { css: `
              line-height: 10px;
            `, children: [_jsx(StyledIcon, { light: !isLightTheme, realDark: isLightTheme, glyph: status === CopyStatus.Success
                                    ? Icon.GLYPHS.selected
                                    : Icon.GLYPHS.close, styledWidth: "20px", css: `
                margin: 8px;
                margin-left: 0;
                display: inline-block;
              ` }), _jsx(TooltipText, { children: status === CopyStatus.Success
                                    ? t("clipboard.success")
                                    : t("clipboard.unsuccessful") })] })] }))] }));
};
export default Clipboard;
const ClipboardDiv = styled.div `
  position: relative;
`;
const TooltipText = styled.span `
  ${verticalAlign("absolute")}
  left: 30px;
`;
//# sourceMappingURL=Clipboard.js.map