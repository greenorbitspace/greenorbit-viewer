import { makeObservable } from "mobx";
import Cartesian2 from "terriajs-cesium/Source/Core/Cartesian2";
import Cartographic from "terriajs-cesium/Source/Core/Cartographic";
import Credit from "terriajs-cesium/Source/Core/Credit";
import Ellipsoid from "terriajs-cesium/Source/Core/Ellipsoid";
import CesiumEvent from "terriajs-cesium/Source/Core/Event";
import GeographicProjection from "terriajs-cesium/Source/Core/GeographicProjection";
import GeographicTilingScheme from "terriajs-cesium/Source/Core/GeographicTilingScheme";
import Math from "terriajs-cesium/Source/Core/Math";
import Resource from "terriajs-cesium/Source/Core/Resource";
import DiscardMissingTileImagePolicy from "terriajs-cesium/Source/Scene/DiscardMissingTileImagePolicy";
import ImageryLayerFeatureInfo from "terriajs-cesium/Source/Scene/ImageryLayerFeatureInfo";
import ImageryProvider from "terriajs-cesium/Source/Scene/ImageryProvider";
/** This is adapted from Cesium's ArcGisMapServerImageryProvider
 * https://github.com/CesiumGS/cesium/blob/51aae2d21014cfc28e948b1719d07f1912df9434/packages/engine/Source/Scene/ArcGisMapServerImageryProvider.js
 * Code licensed under the Apache License v2.0.
 * For details, see https://github.com/CesiumGS/cesium/blob/main/LICENSE.md
 */
export default class ArcGisImageServerImageryProvider {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        Object.defineProperty(this, "tilingScheme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ellipsoid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tileWidth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tileHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "minimumLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "maximumLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rectangle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "errorEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new CesiumEvent()
        });
        Object.defineProperty(this, "ready", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "credit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Note: this can be set dynamically */
        Object.defineProperty(this, "enablePickFeatures", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "usePreCachedTiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tileDiscardPolicy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "baseResource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "defaultNightAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultDayAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "hasAlphaChannel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "defaultAlpha", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultBrightness", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultContrast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultGamma", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultHue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultSaturation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultMagnificationFilter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "defaultMinificationFilter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        Object.defineProperty(this, "readyPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Promise.resolve(true)
        });
        makeObservable(this);
        this.tilingScheme = (_a = options.tilingScheme) !== null && _a !== void 0 ? _a : new GeographicTilingScheme();
        this.rectangle = (_b = options.rectangle) !== null && _b !== void 0 ? _b : this.tilingScheme.rectangle;
        this.ellipsoid = Ellipsoid.WGS84;
        this.tileWidth = (_c = options.tileWidth) !== null && _c !== void 0 ? _c : 256;
        this.tileHeight = (_d = options.tileHeight) !== null && _d !== void 0 ? _d : 256;
        this.minimumLevel = (_e = options.minimumLevel) !== null && _e !== void 0 ? _e : 0;
        this.maximumLevel = (_f = options.maximumLevel) !== null && _f !== void 0 ? _f : 25;
        this.ready = true;
        this.credit =
            typeof options.credit === "string"
                ? new Credit(options.credit)
                : options.credit;
        this.enablePickFeatures = (_g = options.enablePickFeatures) !== null && _g !== void 0 ? _g : true;
        this.usePreCachedTiles = (_h = options.usePreCachedTiles) !== null && _h !== void 0 ? _h : false;
        this.baseResource = new Resource(options.url);
        this.baseResource.appendForwardSlash();
        if (options.parameters) {
            this.baseResource.appendQueryParameters(options.parameters);
        }
        if (options.token) {
            this.baseResource.appendQueryParameters({
                token: options.token
            });
        }
        this.tileDiscardPolicy = new DiscardMissingTileImagePolicy({
            missingImageUrl: this.buildImageResource(0, 0, this.maximumLevel).url,
            pixelsToCheck: [
                new Cartesian2(0, 0),
                new Cartesian2(200, 20),
                new Cartesian2(20, 200),
                new Cartesian2(80, 110),
                new Cartesian2(160, 130)
            ],
            disableCheckIfAllPixelsAreTransparent: true
        });
    }
    get proxy() {
        return this.baseResource.proxy;
    }
    buildImageResource(x, y, level, request) {
        if (this.usePreCachedTiles) {
            return this.baseResource.getDerivedResource({
                url: `tile/${level}/${y}/${x}`,
                request: request
            });
        }
        else {
            const nativeRectangle = this.tilingScheme.tileXYToNativeRectangle(x, y, level);
            const bbox = `${nativeRectangle.west},${nativeRectangle.south},${nativeRectangle.east},${nativeRectangle.north}`;
            const query = {
                bbox: bbox,
                size: `${this.tileWidth},${this.tileHeight}`,
                format: "png32",
                transparent: true,
                f: "image"
            };
            if (this.tilingScheme.projection instanceof GeographicProjection) {
                query.bboxSR = 4326;
                query.imageSR = 4326;
            }
            else {
                query.bboxSR = 3857;
                query.imageSR = 3857;
            }
            return this.baseResource.getDerivedResource({
                url: "exportImage",
                queryParameters: query,
                request: request
            });
        }
    }
    getTileCredits() {
        return [];
    }
    requestImage(x, y, level, request) {
        return ImageryProvider.loadImage(this, this.buildImageResource(x, y, level, request));
    }
    async pickFeatures(_x, _y, _level, longitude, latitude) {
        if (!this.enablePickFeatures) {
            return [];
        }
        let horizontal;
        let vertical;
        let sr;
        if (this.tilingScheme.projection instanceof GeographicProjection) {
            horizontal = Math.toDegrees(longitude);
            vertical = Math.toDegrees(latitude);
            sr = "4326";
        }
        else {
            const projected = this.tilingScheme.projection.project(new Cartographic(longitude, latitude, 0.0));
            horizontal = projected.x;
            vertical = projected.y;
            sr = "3857";
        }
        const query = {
            f: "json",
            geometryType: "esriGeometryPoint",
            geometry: `{x: ${horizontal}, y: ${vertical}, spatialReference: {wkid: ${sr}}}`,
            // Disable catalog items - as we don't use them
            returnCatalogItems: false
        };
        const resource = this.baseResource.getDerivedResource({
            url: "identify",
            queryParameters: query
        });
        const json = (await resource.fetchJson());
        const result = [];
        if (json.value) {
            const featureInfo = new ImageryLayerFeatureInfo();
            featureInfo.data = json;
            featureInfo.name = json.name;
            featureInfo.properties = json.properties;
            featureInfo.description = json.value;
            result.push(featureInfo);
        }
        // Todo: handle json.catalogItems
        return result;
    }
}
//# sourceMappingURL=ArcGisImageServerImageryProvider.js.map